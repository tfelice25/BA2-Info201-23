## `numbers`
len <- length(numbers)
len
## Using the `mean` function, create a variable `numbers_mean` that
## is the mean of your vector `numbers`
numbers_mean <- mean(numbers)
numbers_mean
## Create a vector `lower_numbers` that is the numbers 60:69
lower_numbers <- seq(60, 69)
lower_numbers
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
## Ensure the result looks right!
all_numbers <- c(lower_numbers, numbers)
all_numbers
## Which numbers (out of all_numbers) are larger than 70?
## Use logical operations to create a logical
## vector (TRUES/FALSES) that tell which number is larger
index <- all_numbers >= 70
all_numbers[index]
index
## Out of your all numbers, extract only those that are
## smaller than 70
small_index <- all_numbers < 70
all_numbers[small_index]
## Compute squares of all those numbers that are smaller
## than 70 in your vector
squares <- c(lower_numbers * lower_numbers)
squares
## Compute modulo by 2 of all your numbers.
## Hint: check out the modulo operator '%%'
for (i in 1:20) {
x <- 2
modulo_numbers <- all_numbers[i]%%x
cat(modulo_numbers)
}
## Print even numbers only in your vector.
## Do _not_ create the subvector manually, use modulo operator and logical
## indexing to extract the even numbers!
even_num <- all_numbers[all_numbers%%2 == 0]
print(even_num)
### ------------------ Challenge ------------------
## Write a function `remove_digits` that will remove all digits
## (i.e. characters '0' through '9')
## from all elements in a
## *vector of strings*.
## For instance, "a2b" -> "ab"
remove_digits <- function(a){
for(i in 1:length(a)){
a[i] <- gsub("[0-9]+", "", a[i])
}
for(i in 1:length(a)){
print(a[i])
}
}
## Demonstrate that your approach is successful by passing a
## vector of courses to your function
## For example,
## RemoveDigits(c("INFO 201", "CSE 142", "mps-803c", "K2-team '21"))
## should return
## c("INFO "    "CSE "     "mps-c"    "K-team '")
remove_digits(c("INFO 201", "CSE 142", "mps-803c", "K2-team '21"))
## Write an if/else statement that checks to see if your vector has any digits.
## If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
## Hint: check out the functions 'any' and 'all'
final <- "info 201"
if(grepl("[[:digit:]]", final)){
print("Oh no!")
}else{
print("Yay!")
}
### ---------- Overview ----------
## Load tidyverse (or dplyr) library
install.packages("tidyverse")
library(tidyverse)
## Load the dataset
squirrel <- read_csv("nyc-central-park-squirrel-census-2019.csv")
## Load the dataset
squirrel <- read_csv("glab2-dplyr-miraxnair/nyc-central-park-squirrel-census-2019.csv")
## How many rows and columns does it contain?
dim(squirrel)
## What are the variable names?
colnames()
## What are the variable names?
rownames(squirrel)
colnames(squirrel)
## Show a few lines of data!
head(squirrel, 3)
### ---------- Describe data ----------
## How many different unique squirrels are there?
unique_sq <- select(Unique Squirrel ID)
### ---------- Describe data ----------
## How many different unique squirrels are there?
unique_sq <- select(Unique-Squirrel-ID)
### ---------- Describe data ----------
## How many different unique squirrels are there?
unique_sq <- select(Unique_Squirrel_ID)
### ---------- Describe data ----------
## How many different unique squirrels are there?
squirrel %>%
summarize(n=n_distinct('Unique Squirrel ID')) %>%
pull(n) %>%
cat("\n", ., "distinct squirrels\n")
## How many squirrels were Approaching humans?
squirrel %>%
summarize(a = sum(Approaches)) %>%
pull(a) %>%
cat("\n", ., "squirrel approaches\n")
## How many rows and columns does it contain?
cat("There are ", ncol(squirrel), "columns and", nrow(squirrel), "rows.")
## How many squirrels were indifferent, and how many
## were running from humans?
## use a single 'summarize()' to compute it!
squirrel %>%
summarize(n=sum(Indifferent), a=(Running)) %>%
pull(n)
## How many squirrels were indifferent, and how many
## were running from humans?
## use a single 'summarize()' to compute it!
squirrel %>%
summarize(n=sum(Indifferent), a=sum(Running)) %>%
pull(n)
cat("\n", ., "squirrels were indifferent while ")
## How many squirrels were indifferent, and how many
## were running from humans?
## use a single 'summarize()' to compute it!
squirrel %>%
summarize(n=sum(Indifferent), a=sum(Running)) %>%
pull(n)
cat( "squirrels were indifferent while ")
pull(a)
## How many squirrels were indifferent, and how many
## were running from humans?
## use a single 'summarize()' to compute it!
squirrel %>%
summarize(n=sum(Indifferent), a =sum(Running)) %>%
pull(n)
cat( "squirrels were indifferent while ")
pull(a)
## How many squirrels were indifferent, and how many
## were running from humans?
## use a single 'summarize()' to compute it!
squirrel %>%
summarize(n=sum(Indifferent),
a =sum(Running)) %>%
print()
## How many squirrels were indifferent, and how many
## were running from humans?
## use a single 'summarize()' to compute it!
squirrel %>%
summarize(Indifferent=sum(Indifferent),
Flees =sum('Runs from')) %>%
print()
## How many squirrels were indifferent, and how many
## were running from humans?
## use a single 'summarize()' to compute it!
squirrel %>%
summarize(Indifferent=sum(Indifferent),
Flees =sum('Runs from')) %>%
print()
## How many squirrels were indifferent, and how many
## were running from humans?
## use a single 'summarize()' to compute it!
squirrel %>%
summarize(Indifferent=sum(Indifferent),
Flees = sum('Runs from')) %>%
print()
## How many squirrels were indifferent, and how many
## were running from humans?
## use a single 'summarize()' to compute it!
squirrel %>%
summarize(indifferent = sum(Indifferent),
flees = sum('Runs from')) %>%
print()
## How many squirrels were indifferent, and how many
## were running from humans?
## use a single 'summarize()' to compute it!
squirrel %>%
summarize(indifferent = sum(Indifferent),
flees = sum(`Runs from`)) %>%
print()
## Compute percentage of squirrels who are approaching
## humans
squirrel %>%
group_by(Approaches) %>%
summarize(cnt = n()) %>%
mutate(freq = round(cnt/sum(cnt), 3)) %>%
pull(freq)
## Show 10 randomly selected 'Other Activities' what squirrels do
## But only if those are not NA
squirrel %>%
sample_n(squirrel["Other Activities"], 10)
## Show 10 randomly selected 'Other Activities' what squirrels do
## But only if those are not NA
other_act <- squirrel[ ,21]
squirrel %>%
sample_n(other_acts, 10)
squirrel %>%
filter(!is.na(`Other Activities`)) %>%
sample_n(10) %>%
pull('Other Activities') %>%
print()
### This lab will prepare you for PS4!
### This is a _graded lab_, you'll get 3
### points if you solve and submit it correctly
### Squrrel census data is downloaded from NY Open Data Portal
### See the readme
### https://bitbucket.org/otoomet/data/src/master/nature/
### for more information and better layout of the
### variable names
###
### Variables:
###
### **X**: Longitude coordinate for squirrel sighting point
### **Y**: Latitude coordinate for squirrel sighting point
### **Unique Squirrel ID**: Identification tag for each squirrel
### sightings. The tag is comprised of "Hectare ID" + "Shift" + "Date" +
### "Hectare Squirrel Number."
### **Hectare**: ID tag, which is derived from the hectare grid used to
### divide and count the park area. One axis that runs predominantly
### north-to-south is numerical (1-42), and the axis that runs
### predominantly east-to-west is roman characters (A-I).
### **Shift**: Value is either "AM" or "PM," to communicate whether or
### not the sighting session occurred in the morning or late afternoon.
### **Date**: Concatenation of the sighting session day and month.
### **Hectare Squirrel Number**: Number within the chronological
### sequence of squirrel sightings for a discrete sighting session.
### **Age**: Value is either "Adult" or "Juvenile."
### **Primary Fur Color**: Value is either "Gray," "Cinnamon" or
### "Black."
### **Highlight Fur Color**: Discrete value or string values comprised
### of "Gray," "Cinnamon" or "Black."
### **Combination of Primary and Highlight Color**: A combination of the
### previous two columns; this column gives the total permutations of
### primary and highlight colors observed.
### **Color notes**: Sighters occasionally added commentary on the
### squirrel fur conditions. These notes are provided here.
### **Location**: Value is either "Ground Plane" or "Above Ground."
### Sighters were instructed to indicate the location of where the
### squirrel was when first sighted.
### **Above Ground Sighter Measurement**: For squirrel sightings on the
### ground plane, fields were populated with a value of “FALSE.”
### **Specific Location**: Sighters occasionally added commentary on the
### squirrel location. These notes are provided here.
### **Running**: Squirrel was seen running.
### **Chasing**: Squirrel was seen chasing another squirrel.
### **Climbing**: Squirrel was seen climbing a tree or other
### environmental landmark.
### **Eating**: Squirrel was seen eating.
### **Foraging**: Squirrel was seen foraging for food.
### **Other Activities**:
### **Kuks**: Squirrel was heard kukking, a chirpy vocal communication
### used for a variety of reasons.
### **Quaas**: Squirrel was heard quaaing, an elongated vocal
### communication which can indicate the presence of a ground predator
### such as a dog.
### **Moans**: Squirrel was heard moaning, a high-pitched vocal
### communication which can indicate the presence of an air predator
### such as a hawk.
### **Tail flags**: Squirrel was seen flagging its tail. Flagging is a
### whipping motion used to exaggerate squirrel's size and confuse
### rivals or predators. Looks as if the squirrel is scribbling with
### tail into the air.
### **Tail twitches**: Squirrel was seen twitching its tail. Looks like
### a wave running through the tail, like a breakdancer doing the arm
### wave. Often used to communicate interest, curiosity.
### **Approaches**: Squirrel was seen approaching human, seeking food.
### **Indifferent**: Squirrel was indifferent to human presence.
### **Runs from**: Squirrel was seen running from humans, seeing them as
### a threat.
### **Other Interactions**: Sighter notes on other types of interactions
### between squirrels and humans.
### **Lat/Long**: Latitude and longitude
### ---------- Overview ----------
## Load tidyverse (or dplyr) library
install.packages("tidyverse")
library(tidyverse)
## Load the dataset
squirrel <- read_csv("glab2-dplyr-miraxnair/nyc-central-park-squirrel-census-2019.csv")
## How many rows and columns does it contain?
cat("There are ", ncol(squirrel), "columns and", nrow(squirrel), "rows.")
## What are the variable names?
rownames(squirrel)
colnames(squirrel)
## Show a few lines of data!
head(squirrel, 3)
### ---------- Describe data ----------
## How many different unique squirrels are there?
squirrel %>%
summarize(n=n_distinct('Unique Squirrel ID')) %>%
pull(n) %>%
cat("\n", ., "distinct squirrels\n")
## How many squirrels were Approaching humans?
squirrel %>%
summarize(a = sum(Approaches)) %>%
pull(a) %>%
cat("\n", ., "squirrel approaches\n")
## How many squirrels were indifferent, and how many
## were running from humans?
## use a single 'summarize()' to compute it!
squirrel %>%
summarize(indifferent = sum(Indifferent),
flees = sum(`Runs from`)) %>%
print()
## Compute percentage of squirrels who are approaching
## humans
squirrel %>%
group_by(Approaches) %>%
summarize(cnt = n()) %>%
mutate(freq = round(cnt/sum(cnt), 3)) %>%
pull(freq)
## Show 10 randomly selected 'Other Activities' what squirrels do
## But only if those are not NA
squirrel %>%
filter(!is.na(`Other Activities`)) %>%
sample_n(10) %>%
pull('Other Activities') %>%
print()
install.packages("tidyverse")
shiny::runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
runApp('ps6-interactive-webapp/webapp')
shiny::runApp('ps6-interactive-webapp/webapp')
rsconnect::setAccountInfo(name='miranair', token='B4E1544CE0747FD46992F7C4B5B84732', secret='bRco71rRp4wBgNB8J1W/cm0kYsjop0TnVivYr2I7')
library(rsconnect)
deployApp('ps6-interactive-webapp/ps6-interactive-webapp', server = "shinyapps.io")
deployApp('ps6-interactive-webapp', server = "shinyapps.io")
deployApp('ps6-interactive-webapp', server = "shinyapps.io")
deployApp('miraxnair/ps6-interactive-webapp', server = "shinyapps.io")
deployApp('miranair/ps6-interactive-webapp', server = "shinyapps.io")
deployApp()
deployApp('/ps6-interactive-webapp', server = "shinyapps.io")
deployApp('ps6-interactive-webapp', server = "shinyapps.io")
runApp('ps6-interactive-webapp/webapp')
shiny::runApp('ps6-interactive-webapp/webapp')
shiny::runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
View(other_act)
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
shiny::runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
shiny::runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
shiny::runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
shiny::runApp('BA2-Info201-23')
shiny::runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('ps6-interactive-webapp/webapp')
shiny::runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
runApp('BA2-Info201-23')
shiny::runApp('BA2-Info201-23')
